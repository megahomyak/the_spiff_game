.comment(
`.name()` is a function invocation. Invokes the function with what's in the parentheses being passed in as a string
two maps: variables (mut){str:str} and functions (const){str:callable(str)}. The names of all the variables can be traced by looking at all invocations of ".name", and are a constant set for each individual program. This means that a compiler can be written, but beforehand all functions need to be segregated into two categories: functions that accept program strings and functions that accept plain strings. Probably should also think about functions that accept varnames... and then goes the inner usage... oh shi... but actually, the inner usage should never get into the variables dict at all, except for any function that explicitly goes there (like .name(arst).copy from(qwer)). Yeah, no inner usage, but a "functions that accept varnames" category will be necessary
`.exec(varname)` to execute a string from varname
)

.loc(test1)
.render(
.if(varname).then(prog)
.else(prog)
.while(varname).do(prog)
.bg(somebg.png)
.name(varname).setstr(str)
.name(varname).setprog(prog)
.exec(varname)
.comment(
What's important: separating variables with strings and with programs attached. Probably also adding references through varname->varname, but that will also require the type to be attached... Unfortunate... This thing turns very big, unfortunately
)
)
.loc(
    .name(test1)
    bg (
        if () then (

        )
    )
    obj (

    )
)
